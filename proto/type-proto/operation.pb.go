// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: operation.proto

package prototype

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AccountCreateOperation struct {
	Fee                  *Coin          `protobuf:"bytes,1,opt,name=fee" json:"fee,omitempty"`
	Creator              *AccountName   `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	NewAccountName       *AccountName   `protobuf:"bytes,3,opt,name=new_account_name,json=newAccountName" json:"new_account_name,omitempty"`
	Owner                *Authority     `protobuf:"bytes,4,opt,name=owner" json:"owner,omitempty"`
	Active               *Authority     `protobuf:"bytes,5,opt,name=active" json:"active,omitempty"`
	Posting              *Authority     `protobuf:"bytes,6,opt,name=posting" json:"posting,omitempty"`
	MemoKey              *PublicKeyType `protobuf:"bytes,7,opt,name=memo_key,json=memoKey" json:"memo_key,omitempty"`
	JsonMetadata         string         `protobuf:"bytes,8,opt,name=json_metadata,json=jsonMetadata,proto3" json:"json_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AccountCreateOperation) Reset()         { *m = AccountCreateOperation{} }
func (m *AccountCreateOperation) String() string { return proto.CompactTextString(m) }
func (*AccountCreateOperation) ProtoMessage()    {}
func (*AccountCreateOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operation_986fb4f6665f2d7c, []int{0}
}
func (m *AccountCreateOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCreateOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCreateOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AccountCreateOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCreateOperation.Merge(dst, src)
}
func (m *AccountCreateOperation) XXX_Size() int {
	return m.Size()
}
func (m *AccountCreateOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCreateOperation.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCreateOperation proto.InternalMessageInfo

func (m *AccountCreateOperation) GetFee() *Coin {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *AccountCreateOperation) GetCreator() *AccountName {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *AccountCreateOperation) GetNewAccountName() *AccountName {
	if m != nil {
		return m.NewAccountName
	}
	return nil
}

func (m *AccountCreateOperation) GetOwner() *Authority {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountCreateOperation) GetActive() *Authority {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *AccountCreateOperation) GetPosting() *Authority {
	if m != nil {
		return m.Posting
	}
	return nil
}

func (m *AccountCreateOperation) GetMemoKey() *PublicKeyType {
	if m != nil {
		return m.MemoKey
	}
	return nil
}

func (m *AccountCreateOperation) GetJsonMetadata() string {
	if m != nil {
		return m.JsonMetadata
	}
	return ""
}

type TransferOperation struct {
	From                 *AccountName `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To                   *AccountName `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount               *Coin        `protobuf:"bytes,3,opt,name=amount" json:"amount,omitempty"`
	Memo                 string       `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TransferOperation) Reset()         { *m = TransferOperation{} }
func (m *TransferOperation) String() string { return proto.CompactTextString(m) }
func (*TransferOperation) ProtoMessage()    {}
func (*TransferOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_operation_986fb4f6665f2d7c, []int{1}
}
func (m *TransferOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOperation.Merge(dst, src)
}
func (m *TransferOperation) XXX_Size() int {
	return m.Size()
}
func (m *TransferOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOperation.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOperation proto.InternalMessageInfo

func (m *TransferOperation) GetFrom() *AccountName {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferOperation) GetTo() *AccountName {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TransferOperation) GetAmount() *Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransferOperation) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountCreateOperation)(nil), "prototype.account_create_operation")
	proto.RegisterType((*TransferOperation)(nil), "prototype.transfer_operation")
}
func (m *AccountCreateOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCreateOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Fee.Size()))
		n1, err := m.Fee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Creator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Creator.Size()))
		n2, err := m.Creator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.NewAccountName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.NewAccountName.Size()))
		n3, err := m.NewAccountName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Owner != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Owner.Size()))
		n4, err := m.Owner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.Active != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Active.Size()))
		n5, err := m.Active.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Posting != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Posting.Size()))
		n6, err := m.Posting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.MemoKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.MemoKey.Size()))
		n7, err := m.MemoKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.JsonMetadata) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintOperation(dAtA, i, uint64(len(m.JsonMetadata)))
		i += copy(dAtA[i:], m.JsonMetadata)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.From.Size()))
		n8, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.To != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.To.Size()))
		n9, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Amount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOperation(dAtA, i, uint64(m.Amount.Size()))
		n10, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOperation(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintOperation(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AccountCreateOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.NewAccountName != nil {
		l = m.NewAccountName.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Active != nil {
		l = m.Active.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Posting != nil {
		l = m.Posting.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.MemoKey != nil {
		l = m.MemoKey.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.JsonMetadata)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovOperation(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovOperation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOperation(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOperation(x uint64) (n int) {
	return sovOperation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccountCreateOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: account_create_operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: account_create_operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Coin{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &AccountName{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAccountName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAccountName == nil {
				m.NewAccountName = &AccountName{}
			}
			if err := m.NewAccountName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Authority{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Active == nil {
				m.Active = &Authority{}
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Posting == nil {
				m.Posting = &Authority{}
			}
			if err := m.Posting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoKey == nil {
				m.MemoKey = &PublicKeyType{}
			}
			if err := m.MemoKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transfer_operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transfer_operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &AccountName{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &AccountName{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOperation
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOperation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOperation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOperation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOperation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOperation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOperation
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOperation
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOperation(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOperation = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOperation   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("operation.proto", fileDescriptor_operation_986fb4f6665f2d7c) }

var fileDescriptor_operation_986fb4f6665f2d7c = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x5d, 0x4a, 0xeb, 0x40,
	0x14, 0xc7, 0x6f, 0xfa, 0x91, 0xb4, 0xe7, 0xde, 0x6b, 0xcb, 0x20, 0x38, 0xf4, 0x21, 0xd4, 0xfa,
	0xd0, 0xa2, 0x12, 0x50, 0x71, 0x01, 0xf5, 0x55, 0xf4, 0x21, 0x1b, 0x08, 0xd3, 0x78, 0xaa, 0x51,
	0x67, 0x4e, 0x98, 0x4e, 0x2d, 0xd9, 0x89, 0xae, 0xc0, 0xad, 0xf8, 0xe8, 0x12, 0xa4, 0x6e, 0x44,
	0x66, 0x9a, 0x96, 0x80, 0x58, 0x5f, 0xf2, 0xf1, 0x3f, 0xbf, 0xdf, 0xc0, 0x9c, 0x3f, 0x74, 0x28,
	0x47, 0x2d, 0x4c, 0x46, 0x2a, 0xca, 0x35, 0x19, 0x62, 0x6d, 0xf7, 0x32, 0x45, 0x8e, 0x3d, 0xb0,
	0xcf, 0x55, 0x3c, 0x78, 0xa9, 0x03, 0x17, 0x69, 0x4a, 0x73, 0x65, 0x92, 0x54, 0xa3, 0x30, 0x98,
	0x6c, 0x4c, 0xb6, 0x0f, 0xf5, 0x29, 0x22, 0xf7, 0xfa, 0xde, 0xe8, 0xef, 0x69, 0x27, 0xda, 0x9c,
	0x10, 0xa5, 0x94, 0xa9, 0xd8, 0xce, 0xd8, 0x09, 0x04, 0x4e, 0x23, 0xcd, 0x6b, 0x0e, 0xdb, 0xab,
	0x60, 0xeb, 0x83, 0x95, 0x90, 0x18, 0xaf, 0x39, 0x36, 0x86, 0xae, 0xc2, 0x45, 0x52, 0x1d, 0xf2,
	0xfa, 0x76, 0x77, 0x47, 0xe1, 0x62, 0xbc, 0x0a, 0xae, 0x85, 0x44, 0x76, 0x08, 0x4d, 0x5a, 0x28,
	0xd4, 0xbc, 0xe1, 0xbc, 0xdd, 0xaa, 0x37, 0x37, 0x77, 0xa4, 0x33, 0x53, 0xc4, 0x2b, 0x84, 0x1d,
	0x83, 0x2f, 0x52, 0x93, 0x3d, 0x21, 0x6f, 0x6e, 0x81, 0x4b, 0x86, 0x45, 0x10, 0xe4, 0x34, 0x33,
	0x99, 0xba, 0xe5, 0xfe, 0x16, 0x7c, 0x0d, 0xb1, 0x73, 0x68, 0x49, 0x94, 0x94, 0x3c, 0x60, 0xc1,
	0x03, 0x27, 0xf4, 0x2a, 0x42, 0x3e, 0x9f, 0x3c, 0x66, 0xa9, 0x1d, 0x26, 0xf6, 0x3f, 0x0e, 0x2c,
	0x7b, 0x89, 0x05, 0x3b, 0x80, 0xff, 0xf7, 0x33, 0x52, 0x89, 0x44, 0x23, 0x6e, 0x84, 0x11, 0xbc,
	0xd5, 0xf7, 0x46, 0xed, 0xf8, 0x9f, 0x0d, 0xaf, 0xca, 0x6c, 0xf0, 0xea, 0x01, 0x33, 0x5a, 0xa8,
	0xd9, 0x14, 0x75, 0xa5, 0x95, 0x23, 0x68, 0x4c, 0x35, 0xc9, 0xb2, 0x96, 0x1f, 0x77, 0xe6, 0x20,
	0x36, 0x84, 0x9a, 0xa1, 0xdf, 0xaa, 0xa9, 0x19, 0x62, 0x43, 0xf0, 0x85, 0xb4, 0x51, 0xd9, 0xc5,
	0xb7, 0xba, 0xcb, 0x31, 0x63, 0xd0, 0xb0, 0xb7, 0x70, 0xab, 0x6f, 0xc7, 0xee, 0xfb, 0xa2, 0xfb,
	0xb6, 0x0c, 0xbd, 0xf7, 0x65, 0xe8, 0x7d, 0x2c, 0x43, 0xef, 0xf9, 0x33, 0xfc, 0x33, 0xf1, 0x9d,
	0x7d, 0xf6, 0x15, 0x00, 0x00, 0xff, 0xff, 0x53, 0x09, 0x3b, 0xc2, 0x88, 0x02, 0x00, 0x00,
}
