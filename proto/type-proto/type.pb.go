// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: type.proto

package prototype

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthorityClassification int32

const (
	Authority_owner   AuthorityClassification = 0
	Authority_active  AuthorityClassification = 1
	Authority_key     AuthorityClassification = 2
	Authority_posting AuthorityClassification = 3
)

var AuthorityClassification_name = map[int32]string{
	0: "owner",
	1: "active",
	2: "key",
	3: "posting",
}
var AuthorityClassification_value = map[string]int32{
	"owner":   0,
	"active":  1,
	"key":     2,
	"posting": 3,
}

func (x AuthorityClassification) String() string {
	return proto.EnumName(AuthorityClassification_name, int32(x))
}
func (AuthorityClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{9, 0}
}

type Uint128 struct {
	Hi                   uint64   `protobuf:"varint,1,opt,name=hi,proto3" json:"hi,omitempty"`
	Lo                   uint64   `protobuf:"varint,2,opt,name=lo,proto3" json:"lo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint128) Reset()         { *m = Uint128{} }
func (m *Uint128) String() string { return proto.CompactTextString(m) }
func (*Uint128) ProtoMessage()    {}
func (*Uint128) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{0}
}
func (m *Uint128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Uint128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint128.Merge(dst, src)
}
func (m *Uint128) XXX_Size() int {
	return m.Size()
}
func (m *Uint128) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint128.DiscardUnknown(m)
}

var xxx_messageInfo_Uint128 proto.InternalMessageInfo

func (m *Uint128) GetHi() uint64 {
	if m != nil {
		return m.Hi
	}
	return 0
}

func (m *Uint128) GetLo() uint64 {
	if m != nil {
		return m.Lo
	}
	return 0
}

type AccountName struct {
	Value                *Uint128 `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountName) Reset()         { *m = AccountName{} }
func (m *AccountName) String() string { return proto.CompactTextString(m) }
func (*AccountName) ProtoMessage()    {}
func (*AccountName) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{1}
}
func (m *AccountName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AccountName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountName.Merge(dst, src)
}
func (m *AccountName) XXX_Size() int {
	return m.Size()
}
func (m *AccountName) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountName.DiscardUnknown(m)
}

var xxx_messageInfo_AccountName proto.InternalMessageInfo

func (m *AccountName) GetValue() *Uint128 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Safe64 struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Safe64) Reset()         { *m = Safe64{} }
func (m *Safe64) String() string { return proto.CompactTextString(m) }
func (*Safe64) ProtoMessage()    {}
func (*Safe64) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{2}
}
func (m *Safe64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Safe64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Safe64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Safe64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Safe64.Merge(dst, src)
}
func (m *Safe64) XXX_Size() int {
	return m.Size()
}
func (m *Safe64) XXX_DiscardUnknown() {
	xxx_messageInfo_Safe64.DiscardUnknown(m)
}

var xxx_messageInfo_Safe64 proto.InternalMessageInfo

func (m *Safe64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Coin struct {
	Amount               *Safe64  `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Coin) Reset()         { *m = Coin{} }
func (m *Coin) String() string { return proto.CompactTextString(m) }
func (*Coin) ProtoMessage()    {}
func (*Coin) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{3}
}
func (m *Coin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Coin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Coin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Coin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Coin.Merge(dst, src)
}
func (m *Coin) XXX_Size() int {
	return m.Size()
}
func (m *Coin) XXX_DiscardUnknown() {
	xxx_messageInfo_Coin.DiscardUnknown(m)
}

var xxx_messageInfo_Coin proto.InternalMessageInfo

func (m *Coin) GetAmount() *Safe64 {
	if m != nil {
		return m.Amount
	}
	return nil
}

type Vest struct {
	Amount               *Safe64  `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vest) Reset()         { *m = Vest{} }
func (m *Vest) String() string { return proto.CompactTextString(m) }
func (*Vest) ProtoMessage()    {}
func (*Vest) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{4}
}
func (m *Vest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Vest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vest.Merge(dst, src)
}
func (m *Vest) XXX_Size() int {
	return m.Size()
}
func (m *Vest) XXX_DiscardUnknown() {
	xxx_messageInfo_Vest.DiscardUnknown(m)
}

var xxx_messageInfo_Vest proto.InternalMessageInfo

func (m *Vest) GetAmount() *Safe64 {
	if m != nil {
		return m.Amount
	}
	return nil
}

type PublicKeyData struct {
	Elems_               []byte   `protobuf:"bytes,1,opt,name=elems_,json=elems,proto3" json:"elems_,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKeyData) Reset()         { *m = PublicKeyData{} }
func (m *PublicKeyData) String() string { return proto.CompactTextString(m) }
func (*PublicKeyData) ProtoMessage()    {}
func (*PublicKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{5}
}
func (m *PublicKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyData.Merge(dst, src)
}
func (m *PublicKeyData) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyData proto.InternalMessageInfo

func (m *PublicKeyData) GetElems_() []byte {
	if m != nil {
		return m.Elems_
	}
	return nil
}

type PublicKeyType struct {
	KeyData              *PublicKeyData `protobuf:"bytes,1,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PublicKeyType) Reset()         { *m = PublicKeyType{} }
func (m *PublicKeyType) String() string { return proto.CompactTextString(m) }
func (*PublicKeyType) ProtoMessage()    {}
func (*PublicKeyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{6}
}
func (m *PublicKeyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyType.Merge(dst, src)
}
func (m *PublicKeyType) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyType) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyType.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyType proto.InternalMessageInfo

func (m *PublicKeyType) GetKeyData() *PublicKeyData {
	if m != nil {
		return m.KeyData
	}
	return nil
}

type PublicKeyTypeBinaryKey struct {
	Check                uint32         `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"`
	Data                 *PublicKeyData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PublicKeyTypeBinaryKey) Reset()         { *m = PublicKeyTypeBinaryKey{} }
func (m *PublicKeyTypeBinaryKey) String() string { return proto.CompactTextString(m) }
func (*PublicKeyTypeBinaryKey) ProtoMessage()    {}
func (*PublicKeyTypeBinaryKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{6, 0}
}
func (m *PublicKeyTypeBinaryKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyTypeBinaryKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyTypeBinaryKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyTypeBinaryKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyTypeBinaryKey.Merge(dst, src)
}
func (m *PublicKeyTypeBinaryKey) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyTypeBinaryKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyTypeBinaryKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyTypeBinaryKey proto.InternalMessageInfo

func (m *PublicKeyTypeBinaryKey) GetCheck() uint32 {
	if m != nil {
		return m.Check
	}
	return 0
}

func (m *PublicKeyTypeBinaryKey) GetData() *PublicKeyData {
	if m != nil {
		return m.Data
	}
	return nil
}

type KvAccountAuth struct {
	Key                  *AccountName `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                uint32       `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *KvAccountAuth) Reset()         { *m = KvAccountAuth{} }
func (m *KvAccountAuth) String() string { return proto.CompactTextString(m) }
func (*KvAccountAuth) ProtoMessage()    {}
func (*KvAccountAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{7}
}
func (m *KvAccountAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvAccountAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvAccountAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KvAccountAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvAccountAuth.Merge(dst, src)
}
func (m *KvAccountAuth) XXX_Size() int {
	return m.Size()
}
func (m *KvAccountAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_KvAccountAuth.DiscardUnknown(m)
}

var xxx_messageInfo_KvAccountAuth proto.InternalMessageInfo

func (m *KvAccountAuth) GetKey() *AccountName {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KvAccountAuth) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type KvKeyAuth struct {
	Key                  *PublicKeyType `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                uint32         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *KvKeyAuth) Reset()         { *m = KvKeyAuth{} }
func (m *KvKeyAuth) String() string { return proto.CompactTextString(m) }
func (*KvKeyAuth) ProtoMessage()    {}
func (*KvKeyAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{8}
}
func (m *KvKeyAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvKeyAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvKeyAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KvKeyAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvKeyAuth.Merge(dst, src)
}
func (m *KvKeyAuth) XXX_Size() int {
	return m.Size()
}
func (m *KvKeyAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_KvKeyAuth.DiscardUnknown(m)
}

var xxx_messageInfo_KvKeyAuth proto.InternalMessageInfo

func (m *KvKeyAuth) GetKey() *PublicKeyType {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KvKeyAuth) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Authority struct {
	Cf                   AuthorityClassification `protobuf:"varint,1,opt,name=cf,proto3,enum=prototype.AuthorityClassification" json:"cf,omitempty"`
	WeightThreshold      uint32                  `protobuf:"varint,2,opt,name=weight_threshold,json=weightThreshold,proto3" json:"weight_threshold,omitempty"`
	AccountAuths         []*KvAccountAuth        `protobuf:"bytes,3,rep,name=account_auths,json=accountAuths" json:"account_auths,omitempty"`
	KeyAuths             []*KvKeyAuth            `protobuf:"bytes,4,rep,name=key_auths,json=keyAuths" json:"key_auths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Authority) Reset()         { *m = Authority{} }
func (m *Authority) String() string { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()    {}
func (*Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{9}
}
func (m *Authority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority.Merge(dst, src)
}
func (m *Authority) XXX_Size() int {
	return m.Size()
}
func (m *Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_Authority proto.InternalMessageInfo

func (m *Authority) GetCf() AuthorityClassification {
	if m != nil {
		return m.Cf
	}
	return Authority_owner
}

func (m *Authority) GetWeightThreshold() uint32 {
	if m != nil {
		return m.WeightThreshold
	}
	return 0
}

func (m *Authority) GetAccountAuths() []*KvAccountAuth {
	if m != nil {
		return m.AccountAuths
	}
	return nil
}

func (m *Authority) GetKeyAuths() []*KvKeyAuth {
	if m != nil {
		return m.KeyAuths
	}
	return nil
}

type TimePointSec struct {
	UtcSeconds           uint32   `protobuf:"varint,1,opt,name=utc_seconds,json=utcSeconds,proto3" json:"utc_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TimePointSec) Reset()         { *m = TimePointSec{} }
func (m *TimePointSec) String() string { return proto.CompactTextString(m) }
func (*TimePointSec) ProtoMessage()    {}
func (*TimePointSec) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{10}
}
func (m *TimePointSec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimePointSec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimePointSec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TimePointSec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimePointSec.Merge(dst, src)
}
func (m *TimePointSec) XXX_Size() int {
	return m.Size()
}
func (m *TimePointSec) XXX_DiscardUnknown() {
	xxx_messageInfo_TimePointSec.DiscardUnknown(m)
}

var xxx_messageInfo_TimePointSec proto.InternalMessageInfo

func (m *TimePointSec) GetUtcSeconds() uint32 {
	if m != nil {
		return m.UtcSeconds
	}
	return 0
}

type SignatureType struct {
	Sig                  []byte   `protobuf:"bytes,1,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignatureType) Reset()         { *m = SignatureType{} }
func (m *SignatureType) String() string { return proto.CompactTextString(m) }
func (*SignatureType) ProtoMessage()    {}
func (*SignatureType) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{11}
}
func (m *SignatureType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignatureType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignatureType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignatureType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignatureType.Merge(dst, src)
}
func (m *SignatureType) XXX_Size() int {
	return m.Size()
}
func (m *SignatureType) XXX_DiscardUnknown() {
	xxx_messageInfo_SignatureType.DiscardUnknown(m)
}

var xxx_messageInfo_SignatureType proto.InternalMessageInfo

func (m *SignatureType) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

type Sha256 struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sha256) Reset()         { *m = Sha256{} }
func (m *Sha256) String() string { return proto.CompactTextString(m) }
func (*Sha256) ProtoMessage()    {}
func (*Sha256) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_620c5312dace92a6, []int{12}
}
func (m *Sha256) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sha256) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sha256.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Sha256) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sha256.Merge(dst, src)
}
func (m *Sha256) XXX_Size() int {
	return m.Size()
}
func (m *Sha256) XXX_DiscardUnknown() {
	xxx_messageInfo_Sha256.DiscardUnknown(m)
}

var xxx_messageInfo_Sha256 proto.InternalMessageInfo

func (m *Sha256) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*Uint128)(nil), "prototype.uint128")
	proto.RegisterType((*AccountName)(nil), "prototype.account_name")
	proto.RegisterType((*Safe64)(nil), "prototype.safe64")
	proto.RegisterType((*Coin)(nil), "prototype.coin")
	proto.RegisterType((*Vest)(nil), "prototype.vest")
	proto.RegisterType((*PublicKeyData)(nil), "prototype.public_key_data")
	proto.RegisterType((*PublicKeyType)(nil), "prototype.public_key_type")
	proto.RegisterType((*PublicKeyTypeBinaryKey)(nil), "prototype.public_key_type.binary_key")
	proto.RegisterType((*KvAccountAuth)(nil), "prototype.kv_account_auth")
	proto.RegisterType((*KvKeyAuth)(nil), "prototype.kv_key_auth")
	proto.RegisterType((*Authority)(nil), "prototype.authority")
	proto.RegisterType((*TimePointSec)(nil), "prototype.time_point_sec")
	proto.RegisterType((*SignatureType)(nil), "prototype.signature_type")
	proto.RegisterType((*Sha256)(nil), "prototype.sha256")
	proto.RegisterEnum("prototype.AuthorityClassification", AuthorityClassification_name, AuthorityClassification_value)
}
func (m *Uint128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint128) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hi != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Hi))
	}
	if m.Lo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Lo))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccountName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Safe64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Safe64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Coin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Coin) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Amount.Size()))
		n2, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Vest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Amount.Size()))
		n3, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Elems_) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.Elems_)))
		i += copy(dAtA[i:], m.Elems_)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.KeyData.Size()))
		n4, err := m.KeyData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyTypeBinaryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyTypeBinaryKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Check != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Check))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Data.Size()))
		n5, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvAccountAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvAccountAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Key.Size()))
		n6, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvKeyAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvKeyAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Key.Size()))
		n7, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Authority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authority) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Cf))
	}
	if m.WeightThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.WeightThreshold))
	}
	if len(m.AccountAuths) > 0 {
		for _, msg := range m.AccountAuths {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintType(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KeyAuths) > 0 {
		for _, msg := range m.KeyAuths {
			dAtA[i] = 0x22
			i++
			i = encodeVarintType(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TimePointSec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimePointSec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UtcSeconds != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.UtcSeconds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignatureType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignatureType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Sig) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.Sig)))
		i += copy(dAtA[i:], m.Sig)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Sha256) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sha256) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintType(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Uint128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hi != 0 {
		n += 1 + sovType(uint64(m.Hi))
	}
	if m.Lo != 0 {
		n += 1 + sovType(uint64(m.Lo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Safe64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Coin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Vest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Elems_)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyData != nil {
		l = m.KeyData.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyTypeBinaryKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Check != 0 {
		n += 1 + sovType(uint64(m.Check))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvAccountAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvKeyAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cf != 0 {
		n += 1 + sovType(uint64(m.Cf))
	}
	if m.WeightThreshold != 0 {
		n += 1 + sovType(uint64(m.WeightThreshold))
	}
	if len(m.AccountAuths) > 0 {
		for _, e := range m.AccountAuths {
			l = e.Size()
			n += 1 + l + sovType(uint64(l))
		}
	}
	if len(m.KeyAuths) > 0 {
		for _, e := range m.KeyAuths {
			l = e.Size()
			n += 1 + l + sovType(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TimePointSec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UtcSeconds != 0 {
		n += 1 + sovType(uint64(m.UtcSeconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignatureType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sig)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Sha256) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovType(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozType(x uint64) (n int) {
	return sovType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Uint128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: uint128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: uint128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			m.Hi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hi |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lo", wireType)
			}
			m.Lo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: account_name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: account_name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Uint128{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Safe64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: safe64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: safe64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Coin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: coin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: coin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Safe64{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: vest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: vest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Safe64{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_key_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_key_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems_", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elems_ = append(m.Elems_[:0], dAtA[iNdEx:postIndex]...)
			if m.Elems_ == nil {
				m.Elems_ = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_key_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_key_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyData == nil {
				m.KeyData = &PublicKeyData{}
			}
			if err := m.KeyData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyTypeBinaryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: binary_key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: binary_key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			m.Check = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Check |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PublicKeyData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvAccountAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kv_account_auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kv_account_auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &AccountName{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvKeyAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kv_key_auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kv_key_auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &PublicKeyType{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: authority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: authority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			m.Cf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cf |= (AuthorityClassification(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightThreshold", wireType)
			}
			m.WeightThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeightThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAuths = append(m.AccountAuths, &KvAccountAuth{})
			if err := m.AccountAuths[len(m.AccountAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyAuths = append(m.KeyAuths, &KvKeyAuth{})
			if err := m.KeyAuths[len(m.KeyAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimePointSec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: time_point_sec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: time_point_sec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtcSeconds", wireType)
			}
			m.UtcSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UtcSeconds |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignatureType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: signature_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: signature_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sig", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sig = append(m.Sig[:0], dAtA[iNdEx:postIndex]...)
			if m.Sig == nil {
				m.Sig = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sha256) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sha256: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sha256: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthType
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowType
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipType(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthType = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowType   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("type.proto", fileDescriptor_type_620c5312dace92a6) }

var fileDescriptor_type_620c5312dace92a6 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0xc7, 0x37, 0x49, 0x37, 0xa5, 0xd3, 0xdd, 0x36, 0x58, 0x7c, 0x54, 0x2b, 0x54, 0x56, 0xe1,
	0xd2, 0x4a, 0xa8, 0x52, 0x5b, 0x76, 0xb5, 0x17, 0x84, 0x40, 0xbc, 0x00, 0x86, 0x7b, 0xe4, 0xba,
	0x6e, 0x63, 0x25, 0xb5, 0xab, 0xd8, 0xc9, 0x2a, 0x6f, 0xc2, 0x81, 0x03, 0x8f, 0xc3, 0x91, 0x47,
	0x40, 0xe5, 0x45, 0x90, 0x9d, 0x04, 0xa5, 0x95, 0x00, 0x71, 0xb2, 0xe7, 0xe3, 0xff, 0x9b, 0xb1,
	0x67, 0x00, 0x74, 0xb9, 0x67, 0xb3, 0x7d, 0x26, 0xb5, 0x44, 0x3d, 0x7b, 0x18, 0x47, 0x38, 0x85,
	0x6e, 0xce, 0x85, 0x9e, 0x2f, 0xee, 0xd0, 0x00, 0xdc, 0x98, 0x8f, 0x9c, 0x6b, 0x67, 0xd2, 0xc1,
	0x6e, 0xcc, 0x8d, 0x9d, 0xca, 0x91, 0x5b, 0xd9, 0xa9, 0x0c, 0xef, 0xe0, 0x82, 0x50, 0x2a, 0x73,
	0xa1, 0x23, 0x41, 0x76, 0x0c, 0x4d, 0xe0, 0xbc, 0x20, 0x69, 0xce, 0xac, 0xa4, 0xbf, 0x40, 0xb3,
	0xdf, 0xd4, 0x59, 0x8d, 0xc4, 0x55, 0x42, 0x38, 0x06, 0x5f, 0x91, 0x0d, 0xbb, 0x7d, 0x85, 0x1e,
	0xb5, 0x35, 0x5e, 0x13, 0x9f, 0x43, 0x87, 0x4a, 0x2e, 0xd0, 0x14, 0x7c, 0xb2, 0x33, 0x05, 0x6a,
	0xe4, 0xc3, 0x16, 0xb2, 0x02, 0xe0, 0x3a, 0xc1, 0x48, 0x0a, 0xa6, 0xf4, 0xff, 0x48, 0x26, 0x30,
	0xdc, 0xe7, 0xab, 0x94, 0xd3, 0x28, 0x61, 0x65, 0xb4, 0x26, 0x9a, 0xa0, 0xc7, 0xe0, 0xb3, 0x94,
	0xed, 0x54, 0x64, 0xd5, 0x17, 0xf8, 0xdc, 0x5a, 0xe1, 0x17, 0xe7, 0x28, 0xd5, 0xc0, 0xd0, 0x0d,
	0x3c, 0x68, 0x64, 0x75, 0xa9, 0xab, 0x56, 0xa9, 0x13, 0x30, 0xee, 0x26, 0xac, 0x7c, 0x4f, 0x34,
	0xb9, 0xc2, 0x00, 0x2b, 0x2e, 0x48, 0x56, 0x9a, 0x98, 0x79, 0x3e, 0x8d, 0x19, 0x4d, 0x2c, 0xe1,
	0x12, 0x57, 0x06, 0x9a, 0x41, 0xc7, 0x62, 0xdd, 0x7f, 0x62, 0x6d, 0x5e, 0x88, 0x61, 0x98, 0x14,
	0x51, 0x33, 0x0b, 0x92, 0xeb, 0x18, 0x4d, 0xc1, 0x4b, 0x58, 0x59, 0x37, 0xf6, 0xb4, 0x45, 0x68,
	0x4f, 0x0c, 0x7b, 0x75, 0x0f, 0xd5, 0x08, 0xdc, 0xaa, 0x87, 0x6a, 0x04, 0x1f, 0xa0, 0x9f, 0x14,
	0xb6, 0x90, 0xe5, 0xbd, 0x6c, 0xf3, 0xfe, 0xd0, 0x91, 0xb1, 0xff, 0x86, 0xfc, 0xea, 0x42, 0xcf,
	0xc0, 0x64, 0xc6, 0x75, 0x89, 0x96, 0xe0, 0xd2, 0x8d, 0x05, 0x0e, 0x16, 0x2f, 0xda, 0x0d, 0x36,
	0x19, 0x33, 0x9a, 0x12, 0xa5, 0xf8, 0x86, 0x53, 0xa2, 0xb9, 0x14, 0xd8, 0xa5, 0x1b, 0x34, 0x85,
	0xe0, 0x9e, 0xf1, 0x6d, 0xac, 0x23, 0x1d, 0x67, 0x4c, 0xc5, 0x32, 0x5d, 0xd7, 0x35, 0x86, 0x95,
	0xff, 0x53, 0xe3, 0x46, 0x6f, 0xe0, 0xb2, 0xfd, 0x23, 0x6a, 0xe4, 0x5d, 0x7b, 0x27, 0xbd, 0x9f,
	0x7c, 0x1a, 0x6e, 0xd6, 0xf9, 0xad, 0xc9, 0x47, 0x4b, 0xe8, 0x35, 0xcf, 0x57, 0xa3, 0x8e, 0x15,
	0x3f, 0x39, 0x16, 0x37, 0x61, 0x6c, 0x36, 0xc1, 0x8a, 0xc2, 0xd7, 0x30, 0x38, 0x6e, 0x1b, 0xf5,
	0xe0, 0x5c, 0xde, 0x0b, 0x96, 0x05, 0x67, 0x08, 0xc0, 0x27, 0x54, 0xf3, 0x82, 0x05, 0x0e, 0xea,
	0xda, 0x0f, 0x0d, 0x5c, 0xd4, 0x87, 0xee, 0x5e, 0x2a, 0xcd, 0xc5, 0x36, 0xf0, 0xc2, 0x39, 0x0c,
	0x34, 0xdf, 0xb1, 0x68, 0x2f, 0xb9, 0xd0, 0x91, 0x62, 0x14, 0x3d, 0x87, 0x7e, 0xae, 0xa9, 0xb9,
	0x4a, 0xb1, 0x56, 0xf5, 0x9e, 0x40, 0xae, 0xe9, 0xc7, 0xca, 0x13, 0x86, 0x30, 0x50, 0x7c, 0x2b,
	0x88, 0xce, 0x33, 0x56, 0x6d, 0x66, 0x00, 0x9e, 0xe2, 0xdb, 0x7a, 0x83, 0xcd, 0x35, 0x7c, 0x06,
	0xbe, 0x8a, 0xc9, 0xe2, 0xe6, 0x16, 0x21, 0xe8, 0xc4, 0x44, 0xc5, 0x75, 0xd0, 0xde, 0xdf, 0x05,
	0xdf, 0x0e, 0x63, 0xe7, 0xfb, 0x61, 0xec, 0xfc, 0x38, 0x8c, 0x9d, 0xcf, 0x3f, 0xc7, 0x67, 0x2b,
	0xdf, 0x3e, 0x73, 0xf9, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x37, 0x4d, 0x06, 0x21, 0x24, 0x04, 0x00,
	0x00,
}
