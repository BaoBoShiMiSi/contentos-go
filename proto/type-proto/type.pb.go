// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: type.proto

package prototype

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthorityClassification int32

const (
	Authority_owner   AuthorityClassification = 0
	Authority_active  AuthorityClassification = 1
	Authority_key     AuthorityClassification = 2
	Authority_posting AuthorityClassification = 3
)

var AuthorityClassification_name = map[int32]string{
	0: "owner",
	1: "active",
	2: "key",
	3: "posting",
}
var AuthorityClassification_value = map[string]int32{
	"owner":   0,
	"active":  1,
	"key":     2,
	"posting": 3,
}

func (x AuthorityClassification) String() string {
	return proto.EnumName(AuthorityClassification_name, int32(x))
}
func (AuthorityClassification) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{8, 0}
}

type Uint128 struct {
	Hi                   uint64   `protobuf:"varint,1,opt,name=hi,proto3" json:"hi,omitempty"`
	Lo                   uint64   `protobuf:"varint,2,opt,name=lo,proto3" json:"lo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uint128) Reset()         { *m = Uint128{} }
func (m *Uint128) String() string { return proto.CompactTextString(m) }
func (*Uint128) ProtoMessage()    {}
func (*Uint128) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{0}
}
func (m *Uint128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Uint128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint128.Merge(dst, src)
}
func (m *Uint128) XXX_Size() int {
	return m.Size()
}
func (m *Uint128) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint128.DiscardUnknown(m)
}

var xxx_messageInfo_Uint128 proto.InternalMessageInfo

func (m *Uint128) GetHi() uint64 {
	if m != nil {
		return m.Hi
	}
	return 0
}

func (m *Uint128) GetLo() uint64 {
	if m != nil {
		return m.Lo
	}
	return 0
}

type Namex struct {
	Value                *Uint128 `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Namex) Reset()         { *m = Namex{} }
func (m *Namex) String() string { return proto.CompactTextString(m) }
func (*Namex) ProtoMessage()    {}
func (*Namex) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{1}
}
func (m *Namex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Namex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Namex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Namex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Namex.Merge(dst, src)
}
func (m *Namex) XXX_Size() int {
	return m.Size()
}
func (m *Namex) XXX_DiscardUnknown() {
	xxx_messageInfo_Namex.DiscardUnknown(m)
}

var xxx_messageInfo_Namex proto.InternalMessageInfo

func (m *Namex) GetValue() *Uint128 {
	if m != nil {
		return m.Value
	}
	return nil
}

type Safe64 struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Safe64) Reset()         { *m = Safe64{} }
func (m *Safe64) String() string { return proto.CompactTextString(m) }
func (*Safe64) ProtoMessage()    {}
func (*Safe64) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{2}
}
func (m *Safe64) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Safe64) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Safe64.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Safe64) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Safe64.Merge(dst, src)
}
func (m *Safe64) XXX_Size() int {
	return m.Size()
}
func (m *Safe64) XXX_DiscardUnknown() {
	xxx_messageInfo_Safe64.DiscardUnknown(m)
}

var xxx_messageInfo_Safe64 proto.InternalMessageInfo

func (m *Safe64) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Asset struct {
	Amount               *Safe64  `protobuf:"bytes,1,opt,name=amount" json:"amount,omitempty"`
	Symbol               uint64   `protobuf:"varint,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{3}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(dst, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetAmount() *Safe64 {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Asset) GetSymbol() uint64 {
	if m != nil {
		return m.Symbol
	}
	return 0
}

type PublicKeyData struct {
	Elems_               []byte   `protobuf:"bytes,1,opt,name=elems_,json=elems,proto3" json:"elems_,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicKeyData) Reset()         { *m = PublicKeyData{} }
func (m *PublicKeyData) String() string { return proto.CompactTextString(m) }
func (*PublicKeyData) ProtoMessage()    {}
func (*PublicKeyData) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{4}
}
func (m *PublicKeyData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyData.Merge(dst, src)
}
func (m *PublicKeyData) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyData) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyData.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyData proto.InternalMessageInfo

func (m *PublicKeyData) GetElems_() []byte {
	if m != nil {
		return m.Elems_
	}
	return nil
}

type PublicKeyType struct {
	KeyData              *PublicKeyData `protobuf:"bytes,1,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PublicKeyType) Reset()         { *m = PublicKeyType{} }
func (m *PublicKeyType) String() string { return proto.CompactTextString(m) }
func (*PublicKeyType) ProtoMessage()    {}
func (*PublicKeyType) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{5}
}
func (m *PublicKeyType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyType.Merge(dst, src)
}
func (m *PublicKeyType) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyType) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyType.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyType proto.InternalMessageInfo

func (m *PublicKeyType) GetKeyData() *PublicKeyData {
	if m != nil {
		return m.KeyData
	}
	return nil
}

type PublicKeyTypeBinaryKey struct {
	Check                uint32         `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"`
	Data                 *PublicKeyData `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PublicKeyTypeBinaryKey) Reset()         { *m = PublicKeyTypeBinaryKey{} }
func (m *PublicKeyTypeBinaryKey) String() string { return proto.CompactTextString(m) }
func (*PublicKeyTypeBinaryKey) ProtoMessage()    {}
func (*PublicKeyTypeBinaryKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{5, 0}
}
func (m *PublicKeyTypeBinaryKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKeyTypeBinaryKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKeyTypeBinaryKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PublicKeyTypeBinaryKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKeyTypeBinaryKey.Merge(dst, src)
}
func (m *PublicKeyTypeBinaryKey) XXX_Size() int {
	return m.Size()
}
func (m *PublicKeyTypeBinaryKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKeyTypeBinaryKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKeyTypeBinaryKey proto.InternalMessageInfo

func (m *PublicKeyTypeBinaryKey) GetCheck() uint32 {
	if m != nil {
		return m.Check
	}
	return 0
}

func (m *PublicKeyTypeBinaryKey) GetData() *PublicKeyData {
	if m != nil {
		return m.Data
	}
	return nil
}

type KvAccountAuth struct {
	Key                  *Namex   `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                uint32   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KvAccountAuth) Reset()         { *m = KvAccountAuth{} }
func (m *KvAccountAuth) String() string { return proto.CompactTextString(m) }
func (*KvAccountAuth) ProtoMessage()    {}
func (*KvAccountAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{6}
}
func (m *KvAccountAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvAccountAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvAccountAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KvAccountAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvAccountAuth.Merge(dst, src)
}
func (m *KvAccountAuth) XXX_Size() int {
	return m.Size()
}
func (m *KvAccountAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_KvAccountAuth.DiscardUnknown(m)
}

var xxx_messageInfo_KvAccountAuth proto.InternalMessageInfo

func (m *KvAccountAuth) GetKey() *Namex {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KvAccountAuth) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type KvKeyAuth struct {
	Key                  *PublicKeyType `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value                uint32         `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *KvKeyAuth) Reset()         { *m = KvKeyAuth{} }
func (m *KvKeyAuth) String() string { return proto.CompactTextString(m) }
func (*KvKeyAuth) ProtoMessage()    {}
func (*KvKeyAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{7}
}
func (m *KvKeyAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KvKeyAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KvKeyAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KvKeyAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KvKeyAuth.Merge(dst, src)
}
func (m *KvKeyAuth) XXX_Size() int {
	return m.Size()
}
func (m *KvKeyAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_KvKeyAuth.DiscardUnknown(m)
}

var xxx_messageInfo_KvKeyAuth proto.InternalMessageInfo

func (m *KvKeyAuth) GetKey() *PublicKeyType {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KvKeyAuth) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Authority struct {
	Cf                   AuthorityClassification `protobuf:"varint,1,opt,name=cf,proto3,enum=prototype.AuthorityClassification" json:"cf,omitempty"`
	WeightThreshold      uint32                  `protobuf:"varint,2,opt,name=weight_threshold,json=weightThreshold,proto3" json:"weight_threshold,omitempty"`
	AccountAuths         []*KvAccountAuth        `protobuf:"bytes,3,rep,name=account_auths,json=accountAuths" json:"account_auths,omitempty"`
	KeyAuths             []*KvKeyAuth            `protobuf:"bytes,4,rep,name=key_auths,json=keyAuths" json:"key_auths,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *Authority) Reset()         { *m = Authority{} }
func (m *Authority) String() string { return proto.CompactTextString(m) }
func (*Authority) ProtoMessage()    {}
func (*Authority) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{8}
}
func (m *Authority) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Authority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Authority.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Authority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Authority.Merge(dst, src)
}
func (m *Authority) XXX_Size() int {
	return m.Size()
}
func (m *Authority) XXX_DiscardUnknown() {
	xxx_messageInfo_Authority.DiscardUnknown(m)
}

var xxx_messageInfo_Authority proto.InternalMessageInfo

func (m *Authority) GetCf() AuthorityClassification {
	if m != nil {
		return m.Cf
	}
	return Authority_owner
}

func (m *Authority) GetWeightThreshold() uint32 {
	if m != nil {
		return m.WeightThreshold
	}
	return 0
}

func (m *Authority) GetAccountAuths() []*KvAccountAuth {
	if m != nil {
		return m.AccountAuths
	}
	return nil
}

func (m *Authority) GetKeyAuths() []*KvKeyAuth {
	if m != nil {
		return m.KeyAuths
	}
	return nil
}

type AccountCreateOperation struct {
	Fee                  *Asset         `protobuf:"bytes,1,opt,name=fee" json:"fee,omitempty"`
	Creator              *Namex         `protobuf:"bytes,2,opt,name=creator" json:"creator,omitempty"`
	NewAccountName       *Namex         `protobuf:"bytes,3,opt,name=new_account_name,json=newAccountName" json:"new_account_name,omitempty"`
	Owner                *Authority     `protobuf:"bytes,4,opt,name=owner" json:"owner,omitempty"`
	Active               *Authority     `protobuf:"bytes,5,opt,name=active" json:"active,omitempty"`
	Posting              *Authority     `protobuf:"bytes,6,opt,name=posting" json:"posting,omitempty"`
	MemoKey              *PublicKeyType `protobuf:"bytes,7,opt,name=memo_key,json=memoKey" json:"memo_key,omitempty"`
	JsonMetadata         string         `protobuf:"bytes,8,opt,name=json_metadata,json=jsonMetadata,proto3" json:"json_metadata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *AccountCreateOperation) Reset()         { *m = AccountCreateOperation{} }
func (m *AccountCreateOperation) String() string { return proto.CompactTextString(m) }
func (*AccountCreateOperation) ProtoMessage()    {}
func (*AccountCreateOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{9}
}
func (m *AccountCreateOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountCreateOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountCreateOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AccountCreateOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountCreateOperation.Merge(dst, src)
}
func (m *AccountCreateOperation) XXX_Size() int {
	return m.Size()
}
func (m *AccountCreateOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountCreateOperation.DiscardUnknown(m)
}

var xxx_messageInfo_AccountCreateOperation proto.InternalMessageInfo

func (m *AccountCreateOperation) GetFee() *Asset {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *AccountCreateOperation) GetCreator() *Namex {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *AccountCreateOperation) GetNewAccountName() *Namex {
	if m != nil {
		return m.NewAccountName
	}
	return nil
}

func (m *AccountCreateOperation) GetOwner() *Authority {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *AccountCreateOperation) GetActive() *Authority {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *AccountCreateOperation) GetPosting() *Authority {
	if m != nil {
		return m.Posting
	}
	return nil
}

func (m *AccountCreateOperation) GetMemoKey() *PublicKeyType {
	if m != nil {
		return m.MemoKey
	}
	return nil
}

func (m *AccountCreateOperation) GetJsonMetadata() string {
	if m != nil {
		return m.JsonMetadata
	}
	return ""
}

type TransferOperation struct {
	From                 *Namex   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To                   *Namex   `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	Amount               *Asset   `protobuf:"bytes,3,opt,name=amount" json:"amount,omitempty"`
	Memo                 string   `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransferOperation) Reset()         { *m = TransferOperation{} }
func (m *TransferOperation) String() string { return proto.CompactTextString(m) }
func (*TransferOperation) ProtoMessage()    {}
func (*TransferOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{10}
}
func (m *TransferOperation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransferOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransferOperation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransferOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferOperation.Merge(dst, src)
}
func (m *TransferOperation) XXX_Size() int {
	return m.Size()
}
func (m *TransferOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferOperation.DiscardUnknown(m)
}

var xxx_messageInfo_TransferOperation proto.InternalMessageInfo

func (m *TransferOperation) GetFrom() *Namex {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *TransferOperation) GetTo() *Namex {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *TransferOperation) GetAmount() *Asset {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *TransferOperation) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

type Operation struct {
	// Types that are valid to be assigned to Op:
	//	*Operation_Acop
	//	*Operation_Top
	Op                   isOperation_Op `protobuf_oneof:"op"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{11}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(dst, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type isOperation_Op interface {
	isOperation_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operation_Acop struct {
	Acop *AccountCreateOperation `protobuf:"bytes,1,opt,name=acop,oneof"`
}
type Operation_Top struct {
	Top *TransferOperation `protobuf:"bytes,2,opt,name=top,oneof"`
}

func (*Operation_Acop) isOperation_Op() {}
func (*Operation_Top) isOperation_Op()  {}

func (m *Operation) GetOp() isOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *Operation) GetAcop() *AccountCreateOperation {
	if x, ok := m.GetOp().(*Operation_Acop); ok {
		return x.Acop
	}
	return nil
}

func (m *Operation) GetTop() *TransferOperation {
	if x, ok := m.GetOp().(*Operation_Top); ok {
		return x.Top
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Operation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Operation_OneofMarshaler, _Operation_OneofUnmarshaler, _Operation_OneofSizer, []interface{}{
		(*Operation_Acop)(nil),
		(*Operation_Top)(nil),
	}
}

func _Operation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Acop:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acop); err != nil {
			return err
		}
	case *Operation_Top:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Top); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Operation.Op has unexpected type %T", x)
	}
	return nil
}

func _Operation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Operation)
	switch tag {
	case 1: // op.acop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountCreateOperation)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Acop{msg}
		return true, err
	case 2: // op.top
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferOperation)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Top{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Operation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Acop:
		s := proto.Size(x.Acop)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Top:
		s := proto.Size(x.Top)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// transaction
type Transaction struct {
	RefBlockNum    uint32 `protobuf:"varint,1,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockPrefix uint32 `protobuf:"varint,2,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	// time
	Operations           []*Operation `protobuf:"bytes,3,rep,name=operations" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_type_b45f1faf88932e5a, []int{12}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetRefBlockNum() uint32 {
	if m != nil {
		return m.RefBlockNum
	}
	return 0
}

func (m *Transaction) GetRefBlockPrefix() uint32 {
	if m != nil {
		return m.RefBlockPrefix
	}
	return 0
}

func (m *Transaction) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func init() {
	proto.RegisterType((*Uint128)(nil), "prototype.uint128")
	proto.RegisterType((*Namex)(nil), "prototype.namex")
	proto.RegisterType((*Safe64)(nil), "prototype.safe64")
	proto.RegisterType((*Asset)(nil), "prototype.asset")
	proto.RegisterType((*PublicKeyData)(nil), "prototype.public_key_data")
	proto.RegisterType((*PublicKeyType)(nil), "prototype.public_key_type")
	proto.RegisterType((*PublicKeyTypeBinaryKey)(nil), "prototype.public_key_type.binary_key")
	proto.RegisterType((*KvAccountAuth)(nil), "prototype.kv_account_auth")
	proto.RegisterType((*KvKeyAuth)(nil), "prototype.kv_key_auth")
	proto.RegisterType((*Authority)(nil), "prototype.authority")
	proto.RegisterType((*AccountCreateOperation)(nil), "prototype.account_create_operation")
	proto.RegisterType((*TransferOperation)(nil), "prototype.transfer_operation")
	proto.RegisterType((*Operation)(nil), "prototype.operation")
	proto.RegisterType((*Transaction)(nil), "prototype.transaction")
	proto.RegisterEnum("prototype.AuthorityClassification", AuthorityClassification_name, AuthorityClassification_value)
}
func (m *Uint128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint128) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Hi != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Hi))
	}
	if m.Lo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Lo))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Namex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Namex) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value.Size()))
		n1, err := m.Value.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Safe64) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Safe64) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Amount != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Amount.Size()))
		n2, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Symbol != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Symbol))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Elems_) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.Elems_)))
		i += copy(dAtA[i:], m.Elems_)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.KeyData != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.KeyData.Size()))
		n3, err := m.KeyData.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PublicKeyTypeBinaryKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKeyTypeBinaryKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Check != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Check))
	}
	if m.Data != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Data.Size()))
		n4, err := m.Data.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvAccountAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvAccountAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Key.Size()))
		n5, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KvKeyAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvKeyAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Key.Size()))
		n6, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Authority) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Authority) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cf != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Cf))
	}
	if m.WeightThreshold != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.WeightThreshold))
	}
	if len(m.AccountAuths) > 0 {
		for _, msg := range m.AccountAuths {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintType(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.KeyAuths) > 0 {
		for _, msg := range m.KeyAuths {
			dAtA[i] = 0x22
			i++
			i = encodeVarintType(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AccountCreateOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountCreateOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Fee != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Fee.Size()))
		n7, err := m.Fee.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Creator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Creator.Size()))
		n8, err := m.Creator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.NewAccountName != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintType(dAtA, i, uint64(m.NewAccountName.Size()))
		n9, err := m.NewAccountName.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Owner != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Owner.Size()))
		n10, err := m.Owner.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Active != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Active.Size()))
		n11, err := m.Active.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Posting != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Posting.Size()))
		n12, err := m.Posting.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.MemoKey != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintType(dAtA, i, uint64(m.MemoKey.Size()))
		n13, err := m.MemoKey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.JsonMetadata) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.JsonMetadata)))
		i += copy(dAtA[i:], m.JsonMetadata)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransferOperation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransferOperation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.From != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.From.Size()))
		n14, err := m.From.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.To != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintType(dAtA, i, uint64(m.To.Size()))
		n15, err := m.To.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.Amount != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Amount.Size()))
		n16, err := m.Amount.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintType(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		nn17, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn17
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Operation_Acop) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Acop != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Acop.Size()))
		n18, err := m.Acop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Operation_Top) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Top != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintType(dAtA, i, uint64(m.Top.Size()))
		n19, err := m.Top.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	return i, nil
}
func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefBlockNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintType(dAtA, i, uint64(m.RefBlockNum))
	}
	if m.RefBlockPrefix != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintType(dAtA, i, uint64(m.RefBlockPrefix))
	}
	if len(m.Operations) > 0 {
		for _, msg := range m.Operations {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintType(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintType(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Uint128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hi != 0 {
		n += 1 + sovType(uint64(m.Hi))
	}
	if m.Lo != 0 {
		n += 1 + sovType(uint64(m.Lo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Namex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != nil {
		l = m.Value.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Safe64) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Symbol != 0 {
		n += 1 + sovType(uint64(m.Symbol))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Elems_)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeyData != nil {
		l = m.KeyData.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PublicKeyTypeBinaryKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Check != 0 {
		n += 1 + sovType(uint64(m.Check))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvAccountAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KvKeyAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovType(uint64(m.Value))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Authority) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cf != 0 {
		n += 1 + sovType(uint64(m.Cf))
	}
	if m.WeightThreshold != 0 {
		n += 1 + sovType(uint64(m.WeightThreshold))
	}
	if len(m.AccountAuths) > 0 {
		for _, e := range m.AccountAuths {
			l = e.Size()
			n += 1 + l + sovType(uint64(l))
		}
	}
	if len(m.KeyAuths) > 0 {
		for _, e := range m.KeyAuths {
			l = e.Size()
			n += 1 + l + sovType(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AccountCreateOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fee != nil {
		l = m.Fee.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.NewAccountName != nil {
		l = m.NewAccountName.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Owner != nil {
		l = m.Owner.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Active != nil {
		l = m.Active.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Posting != nil {
		l = m.Posting.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.MemoKey != nil {
		l = m.MemoKey.Size()
		n += 1 + l + sovType(uint64(l))
	}
	l = len(m.JsonMetadata)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransferOperation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != nil {
		l = m.From.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.To != nil {
		l = m.To.Size()
		n += 1 + l + sovType(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovType(uint64(l))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovType(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Acop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Acop != nil {
		l = m.Acop.Size()
		n += 1 + l + sovType(uint64(l))
	}
	return n
}
func (m *Operation_Top) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Top != nil {
		l = m.Top.Size()
		n += 1 + l + sovType(uint64(l))
	}
	return n
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefBlockNum != 0 {
		n += 1 + sovType(uint64(m.RefBlockNum))
	}
	if m.RefBlockPrefix != 0 {
		n += 1 + sovType(uint64(m.RefBlockPrefix))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovType(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovType(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozType(x uint64) (n int) {
	return sovType(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Uint128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: uint128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: uint128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hi", wireType)
			}
			m.Hi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Hi |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lo", wireType)
			}
			m.Lo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Namex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: namex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: namex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Value == nil {
				m.Value = &Uint128{}
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Safe64) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: safe64: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: safe64: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Safe64{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			m.Symbol = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Symbol |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_key_data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_key_data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems_", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Elems_ = append(m.Elems_[:0], dAtA[iNdEx:postIndex]...)
			if m.Elems_ == nil {
				m.Elems_ = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: public_key_type: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: public_key_type: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyData == nil {
				m.KeyData = &PublicKeyData{}
			}
			if err := m.KeyData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicKeyTypeBinaryKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: binary_key: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: binary_key: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Check", wireType)
			}
			m.Check = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Check |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &PublicKeyData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvAccountAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kv_account_auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kv_account_auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &Namex{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvKeyAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: kv_key_auth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: kv_key_auth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &PublicKeyType{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Authority) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: authority: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: authority: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			m.Cf = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cf |= (AuthorityClassification(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightThreshold", wireType)
			}
			m.WeightThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WeightThreshold |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountAuths = append(m.AccountAuths, &KvAccountAuth{})
			if err := m.AccountAuths[len(m.AccountAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyAuths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyAuths = append(m.KeyAuths, &KvKeyAuth{})
			if err := m.KeyAuths[len(m.KeyAuths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountCreateOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: account_create_operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: account_create_operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fee == nil {
				m.Fee = &Asset{}
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &Namex{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAccountName", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewAccountName == nil {
				m.NewAccountName = &Namex{}
			}
			if err := m.NewAccountName.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Owner == nil {
				m.Owner = &Authority{}
			}
			if err := m.Owner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Active == nil {
				m.Active = &Authority{}
			}
			if err := m.Active.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Posting", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Posting == nil {
				m.Posting = &Authority{}
			}
			if err := m.Posting.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MemoKey == nil {
				m.MemoKey = &PublicKeyType{}
			}
			if err := m.MemoKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JsonMetadata", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JsonMetadata = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransferOperation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transfer_operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transfer_operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.From == nil {
				m.From = &Namex{}
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.To == nil {
				m.To = &Namex{}
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &Asset{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountCreateOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operation_Acop{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operation_Top{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowType
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefBlockNum", wireType)
			}
			m.RefBlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefBlockNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefBlockPrefix", wireType)
			}
			m.RefBlockPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefBlockPrefix |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowType
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthType
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipType(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthType
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipType(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowType
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowType
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthType
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowType
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipType(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthType = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowType   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("type.proto", fileDescriptor_type_b45f1faf88932e5a) }

var fileDescriptor_type_b45f1faf88932e5a = []byte{
	// 781 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6a, 0xdb, 0x4a,
	0x14, 0xb6, 0x7e, 0x6c, 0xc7, 0xc7, 0xb1, 0xa3, 0x3b, 0xe4, 0x06, 0x11, 0xb8, 0xc6, 0x28, 0x77,
	0xe1, 0x5c, 0x82, 0x21, 0x3f, 0xb7, 0xb4, 0x85, 0x52, 0x12, 0xba, 0x08, 0x0d, 0x0d, 0xed, 0xd0,
	0xbd, 0x18, 0x2b, 0xa3, 0x58, 0xb5, 0xa4, 0x11, 0xd2, 0xd8, 0x8e, 0x56, 0x7d, 0x81, 0x6e, 0xba,
	0x2b, 0xa5, 0x8b, 0x3e, 0x4e, 0x97, 0x7d, 0x84, 0x92, 0xbe, 0x48, 0x99, 0xd1, 0xc8, 0x91, 0x93,
	0x38, 0x59, 0xd9, 0xe7, 0x9c, 0xef, 0x7c, 0xe7, 0x9b, 0xf3, 0x23, 0x00, 0x9e, 0x27, 0x74, 0x98,
	0xa4, 0x8c, 0x33, 0xd4, 0x92, 0x3f, 0xc2, 0xe1, 0xec, 0x42, 0x73, 0x1a, 0xc4, 0x7c, 0xff, 0xe0,
	0x29, 0xea, 0x82, 0x3e, 0x0e, 0x6c, 0xad, 0xaf, 0x0d, 0x4c, 0xac, 0x8f, 0x03, 0x61, 0x87, 0xcc,
	0xd6, 0x0b, 0x3b, 0x64, 0xce, 0x3e, 0xd4, 0x63, 0x12, 0xd1, 0x2b, 0x34, 0x80, 0xfa, 0x8c, 0x84,
	0x53, 0x2a, 0xb1, 0xed, 0x03, 0x34, 0x5c, 0xd0, 0x0d, 0x15, 0x17, 0x2e, 0x00, 0x4e, 0x0f, 0x1a,
	0x19, 0xf1, 0xe9, 0x93, 0x23, 0xb4, 0x59, 0xcd, 0x31, 0xca, 0xf8, 0x6b, 0xa8, 0x93, 0x2c, 0xa3,
	0x1c, 0xed, 0x42, 0x83, 0x44, 0x6c, 0x1a, 0x73, 0xc5, 0xf9, 0x57, 0x85, 0xb3, 0x60, 0xc0, 0x0a,
	0x80, 0xb6, 0xa0, 0x91, 0xe5, 0xd1, 0x88, 0x85, 0x4a, 0x9a, 0xb2, 0x9c, 0x01, 0x6c, 0x24, 0xd3,
	0x51, 0x18, 0x78, 0xee, 0x84, 0xe6, 0xee, 0x05, 0xe1, 0x04, 0xfd, 0x0d, 0x0d, 0x1a, 0xd2, 0x28,
	0x73, 0x25, 0xeb, 0x3a, 0xae, 0x4b, 0xcb, 0xf9, 0xa6, 0x2d, 0x41, 0x45, 0x11, 0xf4, 0x3f, 0xac,
	0x95, 0x69, 0x4a, 0xc2, 0x76, 0x45, 0xc2, 0x2d, 0x62, 0xdc, 0x9c, 0xd0, 0xfc, 0x15, 0xe1, 0x64,
	0x1b, 0x03, 0x8c, 0x82, 0x98, 0xa4, 0xb9, 0x88, 0x89, 0x47, 0x7a, 0x63, 0xea, 0x4d, 0x24, 0x43,
	0x07, 0x17, 0x06, 0x1a, 0x82, 0x29, 0x69, 0xf5, 0x47, 0x69, 0x25, 0xce, 0x39, 0x83, 0x8d, 0xc9,
	0xcc, 0x25, 0x9e, 0x27, 0x9e, 0xeb, 0x92, 0x29, 0x1f, 0x23, 0x07, 0x8c, 0x09, 0xcd, 0x95, 0x30,
	0xab, 0xc2, 0x20, 0x07, 0x82, 0x0d, 0x55, 0xbc, 0xe8, 0xb0, 0x5e, 0x14, 0x2f, 0x3a, 0xfc, 0x0e,
	0xda, 0x93, 0x99, 0xac, 0x20, 0x89, 0xf6, 0xaa, 0x44, 0x2b, 0xa4, 0x08, 0xfb, 0x21, 0xca, 0xef,
	0x3a, 0xb4, 0x04, 0x19, 0x4b, 0x03, 0x9e, 0xa3, 0x43, 0xd0, 0x3d, 0x5f, 0x12, 0x76, 0x0f, 0x76,
	0x2a, 0x84, 0x0b, 0xc4, 0xd0, 0x0b, 0x49, 0x96, 0x05, 0x7e, 0xe0, 0x11, 0x1e, 0xb0, 0x18, 0xeb,
	0x9e, 0x8f, 0x76, 0xc1, 0x9a, 0xd3, 0xe0, 0x72, 0xcc, 0x5d, 0x3e, 0x4e, 0x69, 0x36, 0x66, 0xe1,
	0x85, 0xaa, 0xb1, 0x51, 0xf8, 0xdf, 0x97, 0x6e, 0xf4, 0x12, 0x3a, 0xd5, 0x56, 0x64, 0xb6, 0xd1,
	0x37, 0x6e, 0x69, 0xbf, 0xd5, 0x2d, 0xbc, 0xae, 0xac, 0x63, 0x81, 0x47, 0x87, 0xd0, 0x2a, 0x9f,
	0x9f, 0xd9, 0xa6, 0x4c, 0xde, 0x5a, 0x4e, 0x2e, 0xc3, 0x58, 0xac, 0x80, 0x4c, 0x72, 0x5e, 0x40,
	0x77, 0x59, 0x36, 0x6a, 0x41, 0x9d, 0xcd, 0x63, 0x9a, 0x5a, 0x35, 0x04, 0xd0, 0x20, 0x1e, 0x0f,
	0x66, 0xd4, 0xd2, 0x50, 0x53, 0x36, 0xd4, 0xd2, 0x51, 0x1b, 0x9a, 0x09, 0xcb, 0x78, 0x10, 0x5f,
	0x5a, 0x86, 0xf3, 0xc9, 0x00, 0xbb, 0x94, 0xe4, 0xa5, 0x94, 0x70, 0xea, 0xb2, 0x84, 0xa6, 0x05,
	0x93, 0x03, 0x86, 0x4f, 0xe9, 0x3d, 0xc3, 0x94, 0xa7, 0x80, 0x45, 0x10, 0xfd, 0x07, 0x4d, 0x99,
	0xc7, 0x52, 0xb5, 0x36, 0x77, 0x87, 0x5e, 0x02, 0xd0, 0x73, 0xb0, 0x62, 0x3a, 0x5f, 0xb4, 0x40,
	0x44, 0x6d, 0x63, 0x45, 0x52, 0x37, 0xa6, 0xf3, 0xe3, 0x02, 0x78, 0x4e, 0x22, 0x51, 0xa7, 0x78,
	0x95, 0x6d, 0xca, 0x84, 0xcd, 0xfb, 0x06, 0x88, 0x0b, 0x08, 0xda, 0x2b, 0x9f, 0x6d, 0xd7, 0x1f,
	0x00, 0x2b, 0x0c, 0x1a, 0x2e, 0xfa, 0x61, 0x37, 0x1e, 0x80, 0x97, 0x20, 0x71, 0x80, 0x11, 0x8d,
	0x98, 0x18, 0x86, 0xdd, 0x7c, 0x74, 0x3d, 0x9b, 0x02, 0x7b, 0x46, 0x73, 0xb4, 0x03, 0x9d, 0x0f,
	0x19, 0x8b, 0xdd, 0x88, 0x72, 0x22, 0xaf, 0x6c, 0xad, 0xaf, 0x0d, 0x5a, 0x78, 0x5d, 0x38, 0xdf,
	0x28, 0x9f, 0xf3, 0x55, 0x03, 0xc4, 0x53, 0x12, 0x67, 0x3e, 0x4d, 0x2b, 0x83, 0xf8, 0x17, 0x4c,
	0x3f, 0x65, 0xd1, 0xca, 0xb3, 0x92, 0x51, 0xd4, 0x07, 0x9d, 0xb3, 0x95, 0x53, 0xd0, 0x39, 0x43,
	0x83, 0xc5, 0xc7, 0xcb, 0x58, 0x31, 0xd3, 0xf2, 0xdb, 0x85, 0xc0, 0x14, 0xc2, 0x65, 0xb7, 0x5b,
	0x58, 0xfe, 0x77, 0x3e, 0x42, 0xeb, 0x46, 0xd2, 0x33, 0x30, 0x89, 0xc7, 0x12, 0x25, 0x69, 0xe9,
	0x9e, 0x56, 0xac, 0xd3, 0x69, 0x0d, 0xcb, 0x14, 0xb4, 0x0f, 0x06, 0x67, 0x89, 0x12, 0xfa, 0x4f,
	0x25, 0xf3, 0xee, 0xcb, 0x4f, 0x6b, 0x58, 0x60, 0x4f, 0x4c, 0xd0, 0x59, 0xe2, 0x7c, 0xd6, 0xa0,
	0x2d, 0x31, 0x62, 0x72, 0x72, 0x3f, 0x3b, 0x29, 0xf5, 0xdd, 0x51, 0xc8, 0xbc, 0x89, 0x1b, 0x4f,
	0x23, 0xf5, 0x35, 0x6b, 0xa7, 0xd4, 0x3f, 0x11, 0xbe, 0xf3, 0x69, 0x84, 0x06, 0x60, 0xdd, 0x60,
	0x92, 0x94, 0xfa, 0xc1, 0x95, 0x3a, 0xe0, 0x6e, 0x09, 0x7b, 0x2b, 0xbd, 0xe8, 0x08, 0x60, 0x51,
	0xb7, 0x3c, 0xde, 0xea, 0x2a, 0x2c, 0x82, 0xb8, 0x82, 0x3b, 0xb1, 0x7e, 0x5c, 0xf7, 0xb4, 0x9f,
	0xd7, 0x3d, 0xed, 0xd7, 0x75, 0x4f, 0xfb, 0xf2, 0xbb, 0x57, 0x1b, 0x35, 0x64, 0xca, 0xe1, 0x9f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x80, 0x67, 0x8f, 0x23, 0xc8, 0x06, 0x00, 0x00,
}
