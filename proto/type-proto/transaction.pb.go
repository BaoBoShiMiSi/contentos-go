// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: transaction.proto

package prototype

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation struct {
	// Types that are valid to be assigned to Op:
	//	*Operation_Acop
	//	*Operation_Top
	Op                   isOperation_Op `protobuf_oneof:"op"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{0}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(dst, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

type isOperation_Op interface {
	isOperation_Op()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Operation_Acop struct {
	Acop *AccountCreateOperation `protobuf:"bytes,1,opt,name=acop,oneof"`
}
type Operation_Top struct {
	Top *TransferOperation `protobuf:"bytes,2,opt,name=top,oneof"`
}

func (*Operation_Acop) isOperation_Op() {}
func (*Operation_Top) isOperation_Op()  {}

func (m *Operation) GetOp() isOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *Operation) GetAcop() *AccountCreateOperation {
	if x, ok := m.GetOp().(*Operation_Acop); ok {
		return x.Acop
	}
	return nil
}

func (m *Operation) GetTop() *TransferOperation {
	if x, ok := m.GetOp().(*Operation_Top); ok {
		return x.Top
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Operation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Operation_OneofMarshaler, _Operation_OneofUnmarshaler, _Operation_OneofSizer, []interface{}{
		(*Operation_Acop)(nil),
		(*Operation_Top)(nil),
	}
}

func _Operation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Acop:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acop); err != nil {
			return err
		}
	case *Operation_Top:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Top); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Operation.Op has unexpected type %T", x)
	}
	return nil
}

func _Operation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Operation)
	switch tag {
	case 1: // op.acop
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AccountCreateOperation)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Acop{msg}
		return true, err
	case 2: // op.top
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferOperation)
		err := b.DecodeMessage(msg)
		m.Op = &Operation_Top{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Operation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Operation)
	// op
	switch x := m.Op.(type) {
	case *Operation_Acop:
		s := proto.Size(x.Acop)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Operation_Top:
		s := proto.Size(x.Top)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// transaction
type Transaction struct {
	RefBlockNum          uint32        `protobuf:"varint,1,opt,name=ref_block_num,json=refBlockNum,proto3" json:"ref_block_num,omitempty"`
	RefBlockPrefix       uint32        `protobuf:"varint,2,opt,name=ref_block_prefix,json=refBlockPrefix,proto3" json:"ref_block_prefix,omitempty"`
	Expiration           *TimePointSec `protobuf:"bytes,3,opt,name=expiration" json:"expiration,omitempty"`
	Operations           []*Operation  `protobuf:"bytes,4,rep,name=operations" json:"operations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{1}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(dst, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetRefBlockNum() uint32 {
	if m != nil {
		return m.RefBlockNum
	}
	return 0
}

func (m *Transaction) GetRefBlockPrefix() uint32 {
	if m != nil {
		return m.RefBlockPrefix
	}
	return 0
}

func (m *Transaction) GetExpiration() *TimePointSec {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (m *Transaction) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

type SignedTransaction struct {
	Trx                  *Transaction     `protobuf:"bytes,1,opt,name=trx" json:"trx,omitempty"`
	Signatures           []*SignatureType `protobuf:"bytes,2,rep,name=signatures" json:"signatures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SignedTransaction) Reset()         { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()    {}
func (*SignedTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{2}
}
func (m *SignedTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedTransaction.Merge(dst, src)
}
func (m *SignedTransaction) XXX_Size() int {
	return m.Size()
}
func (m *SignedTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_SignedTransaction proto.InternalMessageInfo

func (m *SignedTransaction) GetTrx() *Transaction {
	if m != nil {
		return m.Trx
	}
	return nil
}

func (m *SignedTransaction) GetSignatures() []*SignatureType {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type TransactionInvoice struct {
	Status               uint32   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	VmError              bool     `protobuf:"varint,2,opt,name=vm_error,json=vmError,proto3" json:"vm_error,omitempty"`
	VmErrorCode          uint32   `protobuf:"varint,3,opt,name=vm_error_code,json=vmErrorCode,proto3" json:"vm_error_code,omitempty"`
	VmErrorMsg           string   `protobuf:"bytes,4,opt,name=vm_error_msg,json=vmErrorMsg,proto3" json:"vm_error_msg,omitempty"`
	GasUsage             uint64   `protobuf:"varint,5,opt,name=gas_usage,json=gasUsage,proto3" json:"gas_usage,omitempty"`
	VmConsole            string   `protobuf:"bytes,6,opt,name=vm_console,json=vmConsole,proto3" json:"vm_console,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionInvoice) Reset()         { *m = TransactionInvoice{} }
func (m *TransactionInvoice) String() string { return proto.CompactTextString(m) }
func (*TransactionInvoice) ProtoMessage()    {}
func (*TransactionInvoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{3}
}
func (m *TransactionInvoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionInvoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionInvoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactionInvoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionInvoice.Merge(dst, src)
}
func (m *TransactionInvoice) XXX_Size() int {
	return m.Size()
}
func (m *TransactionInvoice) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionInvoice.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionInvoice proto.InternalMessageInfo

func (m *TransactionInvoice) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TransactionInvoice) GetVmError() bool {
	if m != nil {
		return m.VmError
	}
	return false
}

func (m *TransactionInvoice) GetVmErrorCode() uint32 {
	if m != nil {
		return m.VmErrorCode
	}
	return 0
}

func (m *TransactionInvoice) GetVmErrorMsg() string {
	if m != nil {
		return m.VmErrorMsg
	}
	return ""
}

func (m *TransactionInvoice) GetGasUsage() uint64 {
	if m != nil {
		return m.GasUsage
	}
	return 0
}

func (m *TransactionInvoice) GetVmConsole() string {
	if m != nil {
		return m.VmConsole
	}
	return ""
}

type TransactionWrapper struct {
	SigTrx               *SignedTransaction  `protobuf:"bytes,1,opt,name=sig_trx,json=sigTrx" json:"sig_trx,omitempty"`
	Invoice              *TransactionInvoice `protobuf:"bytes,2,opt,name=invoice" json:"invoice,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *TransactionWrapper) Reset()         { *m = TransactionWrapper{} }
func (m *TransactionWrapper) String() string { return proto.CompactTextString(m) }
func (*TransactionWrapper) ProtoMessage()    {}
func (*TransactionWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{4}
}
func (m *TransactionWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TransactionWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TransactionWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TransactionWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionWrapper.Merge(dst, src)
}
func (m *TransactionWrapper) XXX_Size() int {
	return m.Size()
}
func (m *TransactionWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionWrapper proto.InternalMessageInfo

func (m *TransactionWrapper) GetSigTrx() *SignedTransaction {
	if m != nil {
		return m.SigTrx
	}
	return nil
}

func (m *TransactionWrapper) GetInvoice() *TransactionInvoice {
	if m != nil {
		return m.Invoice
	}
	return nil
}

// block
type BlockHeader struct {
	Previous              *Sha256       `protobuf:"bytes,1,opt,name=previous" json:"previous,omitempty"`
	Timestamp             *TimePointSec `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Witness               string        `protobuf:"bytes,3,opt,name=witness,proto3" json:"witness,omitempty"`
	TransactionMerkleRoot *Sha256       `protobuf:"bytes,4,opt,name=transaction_merkle_root,json=transactionMerkleRoot" json:"transaction_merkle_root,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}      `json:"-"`
	XXX_unrecognized      []byte        `json:"-"`
	XXX_sizecache         int32         `json:"-"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{5}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(dst, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetPrevious() *Sha256 {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *BlockHeader) GetTimestamp() *TimePointSec {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *BlockHeader) GetWitness() string {
	if m != nil {
		return m.Witness
	}
	return ""
}

func (m *BlockHeader) GetTransactionMerkleRoot() *Sha256 {
	if m != nil {
		return m.TransactionMerkleRoot
	}
	return nil
}

type SignedBlockHeader struct {
	Header               *BlockHeader   `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	WitnessSignature     *SignatureType `protobuf:"bytes,2,opt,name=witness_signature,json=witnessSignature" json:"witness_signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SignedBlockHeader) Reset()         { *m = SignedBlockHeader{} }
func (m *SignedBlockHeader) String() string { return proto.CompactTextString(m) }
func (*SignedBlockHeader) ProtoMessage()    {}
func (*SignedBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{6}
}
func (m *SignedBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBlockHeader.Merge(dst, src)
}
func (m *SignedBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *SignedBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBlockHeader proto.InternalMessageInfo

func (m *SignedBlockHeader) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SignedBlockHeader) GetWitnessSignature() *SignatureType {
	if m != nil {
		return m.WitnessSignature
	}
	return nil
}

type SignedBlock struct {
	SignedHeader         *SignedBlockHeader    `protobuf:"bytes,1,opt,name=signed_header,json=signedHeader" json:"signed_header,omitempty"`
	Transactions         []*TransactionWrapper `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SignedBlock) Reset()         { *m = SignedBlock{} }
func (m *SignedBlock) String() string { return proto.CompactTextString(m) }
func (*SignedBlock) ProtoMessage()    {}
func (*SignedBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_transaction_ece5ef2455982265, []int{7}
}
func (m *SignedBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignedBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignedBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SignedBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignedBlock.Merge(dst, src)
}
func (m *SignedBlock) XXX_Size() int {
	return m.Size()
}
func (m *SignedBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_SignedBlock.DiscardUnknown(m)
}

var xxx_messageInfo_SignedBlock proto.InternalMessageInfo

func (m *SignedBlock) GetSignedHeader() *SignedBlockHeader {
	if m != nil {
		return m.SignedHeader
	}
	return nil
}

func (m *SignedBlock) GetTransactions() []*TransactionWrapper {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*Operation)(nil), "prototype.operation")
	proto.RegisterType((*Transaction)(nil), "prototype.transaction")
	proto.RegisterType((*SignedTransaction)(nil), "prototype.signed_transaction")
	proto.RegisterType((*TransactionInvoice)(nil), "prototype.transaction_invoice")
	proto.RegisterType((*TransactionWrapper)(nil), "prototype.transaction_wrapper")
	proto.RegisterType((*BlockHeader)(nil), "prototype.block_header")
	proto.RegisterType((*SignedBlockHeader)(nil), "prototype.signed_block_header")
	proto.RegisterType((*SignedBlock)(nil), "prototype.signed_block")
}
func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != nil {
		nn1, err := m.Op.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Operation_Acop) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Acop != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Acop.Size()))
		n2, err := m.Acop.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Operation_Top) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Top != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Top.Size()))
		n3, err := m.Top.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RefBlockNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.RefBlockNum))
	}
	if m.RefBlockPrefix != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.RefBlockPrefix))
	}
	if m.Expiration != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Expiration.Size()))
		n4, err := m.Expiration.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Operations) > 0 {
		for _, msg := range m.Operations {
			dAtA[i] = 0x22
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignedTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedTransaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Trx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Trx.Size()))
		n5, err := m.Trx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Signatures) > 0 {
		for _, msg := range m.Signatures {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransactionInvoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionInvoice) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Status))
	}
	if m.VmError {
		dAtA[i] = 0x10
		i++
		if m.VmError {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.VmErrorCode != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.VmErrorCode))
	}
	if len(m.VmErrorMsg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.VmErrorMsg)))
		i += copy(dAtA[i:], m.VmErrorMsg)
	}
	if m.GasUsage != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasUsage))
	}
	if len(m.VmConsole) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.VmConsole)))
		i += copy(dAtA[i:], m.VmConsole)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TransactionWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionWrapper) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SigTrx != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.SigTrx.Size()))
		n6, err := m.SigTrx.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Invoice != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Invoice.Size()))
		n7, err := m.Invoice.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Previous != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Previous.Size()))
		n8, err := m.Previous.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Timestamp.Size()))
		n9, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.Witness) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Witness)))
		i += copy(dAtA[i:], m.Witness)
	}
	if m.TransactionMerkleRoot != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.TransactionMerkleRoot.Size()))
		n10, err := m.TransactionMerkleRoot.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignedBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Header.Size()))
		n11, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.WitnessSignature != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.WitnessSignature.Size()))
		n12, err := m.WitnessSignature.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SignedBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignedBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SignedHeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.SignedHeader.Size()))
		n13, err := m.SignedHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintTransaction(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Op != nil {
		n += m.Op.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation_Acop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Acop != nil {
		l = m.Acop.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}
func (m *Operation_Top) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Top != nil {
		l = m.Top.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}
func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RefBlockNum != 0 {
		n += 1 + sovTransaction(uint64(m.RefBlockNum))
	}
	if m.RefBlockPrefix != 0 {
		n += 1 + sovTransaction(uint64(m.RefBlockPrefix))
	}
	if m.Expiration != nil {
		l = m.Expiration.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Trx != nil {
		l = m.Trx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionInvoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTransaction(uint64(m.Status))
	}
	if m.VmError {
		n += 2
	}
	if m.VmErrorCode != 0 {
		n += 1 + sovTransaction(uint64(m.VmErrorCode))
	}
	l = len(m.VmErrorMsg)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.GasUsage != 0 {
		n += 1 + sovTransaction(uint64(m.GasUsage))
	}
	l = len(m.VmConsole)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TransactionWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SigTrx != nil {
		l = m.SigTrx.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Invoice != nil {
		l = m.Invoice.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Previous != nil {
		l = m.Previous.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Witness)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.TransactionMerkleRoot != nil {
		l = m.TransactionMerkleRoot.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.WitnessSignature != nil {
		l = m.WitnessSignature.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SignedBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignedHeader != nil {
		l = m.SignedHeader.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovTransaction(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AccountCreateOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operation_Acop{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Top", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TransferOperation{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Op = &Operation_Top{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefBlockNum", wireType)
			}
			m.RefBlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefBlockNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefBlockPrefix", wireType)
			}
			m.RefBlockPrefix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefBlockPrefix |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Expiration == nil {
				m.Expiration = &TimePointSec{}
			}
			if err := m.Expiration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: signed_transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: signed_transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trx == nil {
				m.Trx = &Transaction{}
			}
			if err := m.Trx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, &SignatureType{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionInvoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transaction_invoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transaction_invoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmError", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VmError = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmErrorCode", wireType)
			}
			m.VmErrorCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VmErrorCode |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmErrorMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmErrorMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsage", wireType)
			}
			m.GasUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsage |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VmConsole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VmConsole = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: transaction_wrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: transaction_wrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigTrx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SigTrx == nil {
				m.SigTrx = &SignedTransaction{}
			}
			if err := m.SigTrx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Invoice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Invoice == nil {
				m.Invoice = &TransactionInvoice{}
			}
			if err := m.Invoice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: block_header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: block_header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Previous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Previous == nil {
				m.Previous = &Sha256{}
			}
			if err := m.Previous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &TimePointSec{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Witness", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Witness = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionMerkleRoot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TransactionMerkleRoot == nil {
				m.TransactionMerkleRoot = &Sha256{}
			}
			if err := m.TransactionMerkleRoot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: signed_block_header: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: signed_block_header: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &BlockHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessSignature", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WitnessSignature == nil {
				m.WitnessSignature = &SignatureType{}
			}
			if err := m.WitnessSignature.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignedBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: signed_block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: signed_block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SignedHeader == nil {
				m.SignedHeader = &SignedBlockHeader{}
			}
			if err := m.SignedHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &TransactionWrapper{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("transaction.proto", fileDescriptor_transaction_ece5ef2455982265) }

var fileDescriptor_transaction_ece5ef2455982265 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xc1, 0x6f, 0xd3, 0x3e,
	0x18, 0x5d, 0xd6, 0xfe, 0xda, 0xe6, 0x6b, 0xfb, 0x63, 0xf3, 0x60, 0xcb, 0x86, 0x56, 0x55, 0xe1,
	0xd2, 0x0b, 0x43, 0x14, 0x18, 0xec, 0xda, 0x09, 0x34, 0x0e, 0x43, 0xc8, 0xc0, 0xd9, 0xf2, 0x52,
	0x37, 0x8b, 0xb6, 0xc4, 0x91, 0xed, 0x76, 0xdd, 0x89, 0x23, 0x37, 0xae, 0xf0, 0x27, 0x21, 0xc4,
	0x81, 0x3b, 0x17, 0x34, 0xfe, 0x11, 0x14, 0xc7, 0x49, 0x9d, 0x52, 0xb8, 0xb4, 0xf9, 0x3e, 0xbf,
	0x67, 0xbf, 0xef, 0xf9, 0x19, 0x36, 0x95, 0xa0, 0x89, 0xa4, 0x81, 0x8a, 0x78, 0x72, 0x90, 0x0a,
	0xae, 0x38, 0x72, 0xf5, 0x9f, 0xba, 0x4e, 0xd9, 0x1e, 0x64, 0xbf, 0x79, 0x7b, 0xef, 0x16, 0x4f,
	0x99, 0xa0, 0x0b, 0x9c, 0xff, 0x1e, 0xdc, 0xb2, 0x85, 0x8e, 0xa0, 0x4e, 0x03, 0x9e, 0x7a, 0x4e,
	0xdf, 0x19, 0xb4, 0x87, 0xf7, 0x0e, 0xca, 0x3d, 0x0e, 0x68, 0x10, 0xf0, 0x69, 0xa2, 0x48, 0x20,
	0x18, 0x55, 0x8c, 0x94, 0x94, 0x93, 0x35, 0xac, 0x29, 0xe8, 0x21, 0xd4, 0x14, 0x4f, 0xbd, 0x75,
	0xcd, 0xdc, 0xb7, 0x98, 0x5a, 0xda, 0x84, 0x89, 0x0a, 0x27, 0xc3, 0x8e, 0xea, 0xb0, 0xce, 0x53,
	0xff, 0x9b, 0x03, 0x6d, 0x4b, 0x3e, 0xf2, 0xa1, 0x2b, 0xd8, 0x84, 0x9c, 0x5d, 0xf2, 0xe0, 0x82,
	0x24, 0xd3, 0x58, 0x8b, 0xe9, 0xe2, 0xb6, 0x60, 0x93, 0x51, 0xd6, 0x7b, 0x35, 0x8d, 0xd1, 0x00,
	0x36, 0x16, 0x98, 0x54, 0xb0, 0x49, 0x34, 0xd7, 0x27, 0x77, 0xf1, 0xff, 0x05, 0xec, 0xb5, 0xee,
	0xa2, 0x23, 0x00, 0x36, 0x4f, 0xa3, 0xfc, 0x60, 0xaf, 0xa6, 0xd5, 0xed, 0xda, 0xea, 0xa2, 0x98,
	0x91, 0x94, 0x47, 0x89, 0x22, 0x92, 0x05, 0xd8, 0x02, 0xa3, 0xc7, 0x00, 0xa5, 0x64, 0xe9, 0xd5,
	0xfb, 0xb5, 0x41, 0x7b, 0x78, 0xdb, 0xa2, 0x96, 0x8b, 0xd8, 0xc2, 0xf9, 0xd7, 0x80, 0x64, 0x14,
	0x26, 0x6c, 0x4c, 0xec, 0xa1, 0x06, 0x50, 0x53, 0x62, 0x6e, 0x7c, 0xdd, 0x5e, 0x76, 0x27, 0x07,
	0xe1, 0x0c, 0x92, 0x09, 0xce, 0xf8, 0x54, 0x4d, 0x05, 0x93, 0xde, 0xba, 0x3e, 0xd5, 0x16, 0x5c,
	0x2e, 0x92, 0xac, 0xc4, 0x16, 0xd8, 0xff, 0xea, 0xc0, 0x96, 0xb5, 0x1f, 0x89, 0x92, 0x19, 0x8f,
	0x02, 0x86, 0xb6, 0xa1, 0x21, 0x15, 0x55, 0x53, 0x69, 0xac, 0x34, 0x15, 0xda, 0x85, 0xd6, 0x2c,
	0x26, 0x4c, 0x08, 0x2e, 0xb4, 0x7b, 0x2d, 0xdc, 0x9c, 0xc5, 0xcf, 0xb3, 0x32, 0xbb, 0x84, 0x62,
	0x89, 0x04, 0x7c, 0xcc, 0xb4, 0x73, 0x5d, 0xdc, 0x36, 0xeb, 0xc7, 0x7c, 0xcc, 0x50, 0x1f, 0x3a,
	0x25, 0x26, 0x96, 0xa1, 0x57, 0xef, 0x3b, 0x03, 0x17, 0x83, 0x81, 0x9c, 0xca, 0x10, 0xdd, 0x05,
	0x37, 0xa4, 0x92, 0x4c, 0x25, 0x0d, 0x99, 0xf7, 0x5f, 0xdf, 0x19, 0xd4, 0x71, 0x2b, 0xa4, 0xf2,
	0x5d, 0x56, 0xa3, 0x7d, 0x80, 0x59, 0x4c, 0x02, 0x9e, 0x48, 0x7e, 0xc9, 0xbc, 0x86, 0x26, 0xbb,
	0xb3, 0xf8, 0x38, 0x6f, 0xf8, 0x1f, 0x96, 0x86, 0xb9, 0x12, 0x34, 0x4d, 0x99, 0x40, 0x87, 0xd0,
	0x94, 0x51, 0x48, 0x16, 0x6e, 0xee, 0x2f, 0x99, 0x53, 0x75, 0x1e, 0x37, 0x64, 0x14, 0xbe, 0x15,
	0x73, 0xf4, 0x0c, 0x9a, 0xc6, 0x0f, 0x93, 0xd1, 0xde, 0xea, 0x5b, 0x28, 0x5c, 0xc3, 0x05, 0xdc,
	0xff, 0xe1, 0x40, 0x27, 0x4f, 0xda, 0x39, 0xa3, 0x63, 0x26, 0xd0, 0x7d, 0x68, 0xa5, 0x82, 0xcd,
	0x22, 0x6e, 0x1c, 0x6d, 0x0f, 0x37, 0x6d, 0x0d, 0xe7, 0x74, 0xf8, 0xe4, 0x10, 0x97, 0x10, 0xf4,
	0x14, 0xdc, 0x2c, 0x65, 0x52, 0xd1, 0xb8, 0x78, 0x1f, 0xff, 0x48, 0xe0, 0x02, 0x8b, 0x3c, 0x68,
	0x5e, 0x45, 0x2a, 0x61, 0x52, 0x6a, 0xfb, 0x5d, 0x5c, 0x94, 0xe8, 0x25, 0xec, 0xd8, 0x92, 0x63,
	0x26, 0x2e, 0x2e, 0x19, 0x11, 0x9c, 0x2b, 0x7d, 0x0b, 0x2b, 0x05, 0xdd, 0xb1, 0x18, 0xa7, 0x9a,
	0x80, 0x39, 0x57, 0xfe, 0x47, 0x07, 0xb6, 0x8c, 0x6d, 0x95, 0x21, 0x1f, 0x40, 0x23, 0xff, 0x32,
	0x23, 0xee, 0x58, 0x3b, 0xda, 0x40, 0x6c, 0x60, 0xe8, 0x05, 0x6c, 0x1a, 0x79, 0xa4, 0xcc, 0xe4,
	0x8a, 0x71, 0x97, 0xf2, 0xbb, 0x61, 0x38, 0x6f, 0x8a, 0xb6, 0xff, 0xc9, 0x81, 0x8e, 0x2d, 0x08,
	0x1d, 0x43, 0xd7, 0xd4, 0x15, 0x41, 0xbd, 0x3f, 0xef, 0xbd, 0xa2, 0xcb, 0x6c, 0x72, 0x92, 0xab,
	0x1b, 0x41, 0xc7, 0x9a, 0xbf, 0x78, 0x58, 0x7f, 0xcb, 0x80, 0x09, 0x1b, 0xae, 0x70, 0x46, 0x1b,
	0x5f, 0x6e, 0x7a, 0xce, 0xf7, 0x9b, 0x9e, 0xf3, 0xf3, 0xa6, 0xe7, 0x7c, 0xfe, 0xd5, 0x5b, 0x3b,
	0x6b, 0x68, 0xfa, 0xa3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xf7, 0x14, 0xb0, 0x80, 0x05,
	0x00, 0x00,
}
