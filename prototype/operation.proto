syntax = "proto3";

package prototype;

option go_package = "github.com/coschain/contentos-go/prototype";

import "prototype/type.proto";


message account_create_operation{
    coin fee = 1;
    account_name creator = 2;
    account_name new_account_name = 3;
    authority owner = 4;
    string json_metadata = 8;
}

message transfer_operation{
    account_name from = 1;
    account_name to = 2;
    coin amount = 3;
    string memo = 4;
}

message transfer_to_vesting_operation{
    account_name from = 1;
    account_name to = 2;
    coin amount = 3;
}

message vote_operation{
    account_name voter = 1;
    uint64 idx = 3;
}

message bp_register_operation{
    account_name owner = 1;
    string url = 2;
    string desc = 3;
    public_key_type block_signing_key = 4;
    chain_properties  props = 5;
}

message bp_unregister_operation{
    account_name owner = 1;
}

message bp_vote_operation{
    account_name voter = 1;
    account_name witness = 2;
    bool cancel = 3;
}

message follow_operation{
    account_name account = 1;
    account_name f_account = 2;
    bool cancel = 3;
}

message contract_deploy_operation{
    account_name owner = 1;
    string contract = 2;
    string abi = 3;
    bytes  code = 4;
}

message contract_apply_operation{
    account_name caller = 1;          // who apply this op
    account_name owner = 2;         // who owner this contract
    string contract = 3;            // contract name
    string method = 4;              // call which method
    string params = 5;              // param list, encoded as a single json string. e.g. '[]' or '["hello", 3, true]'
    coin   amount = 6;              // cos-coin send to the contract
    coin   gas = 7;                 // max permit gas cost when apply
}

message post_operation{
    uint64 uuid             = 1;
    account_name owner      = 2;
    string title            = 3;
    string content          = 4;
    repeated string tags    = 5;
    repeated beneficiary_route_type beneficiaries = 6;
}

message reply_operation{
    uint64 uuid             = 1;
    account_name owner      = 2;
    string content          = 3;
    uint64 parent_uuid      = 4;
    repeated beneficiary_route_type beneficiaries = 6;
}

message claim_all_operation {
    account_name account = 1;
}

message claim_operation {
    account_name account = 1;
    uint64 amount = 2;
}

